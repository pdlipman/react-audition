// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App App should render properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    store={
        Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div
        className="App"
>
        <header
                className="App-header"
        >
                <h1
                        className="App-title"
                >
                        Front Porch Interview Project
                </h1>
        </header>
        <p
                className="App-intro"
        >
                Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.
        </p>
        <p
                className="App-intro"
        >
                Good luck!
        </p>
        <Connect(Dashboard) />
</div>,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <header
            className="App-header"
>
            <h1
                        className="App-title"
            >
                        Front Porch Interview Project
            </h1>
</header>,
          <p
            className="App-intro"
>
            Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.
</p>,
          <p
            className="App-intro"
>
            Good luck!
</p>,
          <Connect(Dashboard) />,
        ],
        "className": "App",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h1
              className="App-title"
>
              Front Porch Interview Project
</h1>,
            "className": "App-header",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Front Porch Interview Project",
              "className": "App-title",
            },
            "ref": null,
            "rendered": "Front Porch Interview Project",
            "type": "h1",
          },
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.",
            "className": "App-intro",
          },
          "ref": null,
          "rendered": "Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Good luck!",
            "className": "App-intro",
          },
          "ref": null,
          "rendered": "Good luck!",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div
          className="App"
>
          <header
                    className="App-header"
          >
                    <h1
                              className="App-title"
                    >
                              Front Porch Interview Project
                    </h1>
          </header>
          <p
                    className="App-intro"
          >
                    Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.
          </p>
          <p
                    className="App-intro"
          >
                    Good luck!
          </p>
          <Connect(Dashboard) />
</div>,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <header
              className="App-header"
>
              <h1
                            className="App-title"
              >
                            Front Porch Interview Project
              </h1>
</header>,
            <p
              className="App-intro"
>
              Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.
</p>,
            <p
              className="App-intro"
>
              Good luck!
</p>,
            <Connect(Dashboard) />,
          ],
          "className": "App",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h1
                className="App-title"
>
                Front Porch Interview Project
</h1>,
              "className": "App-header",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Front Porch Interview Project",
                "className": "App-title",
              },
              "ref": null,
              "rendered": "Front Porch Interview Project",
              "type": "h1",
            },
            "type": "header",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.",
              "className": "App-intro",
            },
            "ref": null,
            "rendered": "Some boilerplate code has been provided; please build upon it (or replace it) to create your solution.",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Good luck!",
              "className": "App-intro",
            },
            "ref": null,
            "rendered": "Good luck!",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
